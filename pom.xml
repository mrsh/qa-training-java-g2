<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.zpsb.qa</groupId>
    <artifactId>training</artifactId>
    <version>1.0-SNAPSHOT</version>
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
<!--    Wewnątrz obiektu <dependencies> wczytujemy zewnętrzne biblioteki JAVA, których mamy zamiar użyć w ramach naszego projektu-->
    <dependencies>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>6.14.3</version>
        </dependency>
        <dependency>
            <groupId>org.uncommons</groupId>
            <artifactId>reportng</artifactId>
            <version>1.1.4</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.testng</groupId>
                    <artifactId>testng</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>3.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.0</version>
                <configuration>
                    <forkCount>5</forkCount>
                    <properties>
                        <property>
                            <name>usedefaultlisteners</name>
                            <value>false</value>
                        </property>
                        <property>
                            <name>listener</name>
                            <value>org.uncommons.reportng.HTMLReporter, org.uncommons.reportng.JUnitXMLReporter</value>
                        </property>
                    </properties>
<!--                    Wskazanie katalogu, w którym zostaną umieszczone wyniki uruchomienia testów oraz skompilowane klasy,
                    ale tylko jeżeli użyjemy komendy mvn test lub mvn clean test, jeżeli testy uruchomimy z poziomu IDE,
                    to wyniki nie zostaną zapisane do target
                    mvn test - uruchom testy
                    mvn clean test - wyczyść katalog target i uruchom testy - rekomendowane-->
                    <workingDirectory>target/</workingDirectory>
<!--                    Wskazanie, że negatywny wynik testów nie wpłynie na powodzenie builda-->
                    <testFailureIgnore>true</testFailureIgnore>
<!--                    Wskazanie pliku, z którego wczytane zostaną testy, możliwe jest podanie kilku plików oddzielonych przecinkami,
                        wtedy zostaną one wykonane w takiej kolejności, w jakiej je podaliśmy, ale maven potraktuje je jako
                        jeden zestaw testów - bardzo wygodne i użyteczne, ponieważ dzięki temu możemy tworzyć sobie kilka plików
                        z testami np. konkretnych kawałków systemu, którymi łatwiej jest nam zarządzać i sprawować kontrolę-->
                    <suiteXmlFiles>suite.xml</suiteXmlFiles>
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>